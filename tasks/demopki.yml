---
- name: OpenVPN | Certs | include demo pki vars
  include_vars:
    file: demo.yml

- name: OpenVPN | Certs | Set dir
  set_fact:
    pki_dir: "{{ demo_pkipath }}"

- name: OpenVPN | Certs | Make sure directory exists
  file:
    path: "{{ demo_pkipath }}"
    state: directory
    mode: '0755'

- name: OpenVPN | Certs | gen takey
  shell: openssl prime -generate -bits 2048 -hex
  register: takeycontent
  tags:
    - skip_ansible_lint
  args:
    creates: "{{ demo_pkipath }}/ta.key"

- name: OpenVPN | Certs | write takey
  template:
    src: demo_ta.key.j2
    dest: "{{ demo_pkipath }}/ta.key"
    mode: 0640
  vars:
    key: "{{ takeycontent.stdout }}"

- name: OpenVPN | Certs | Ensure the directories exist
  file:
    dest: "{{ demo_pkipath }}/{{ item }}"
    state: directory
    recurse: true
    mode: '0700'
  with_items:
    - ecparams
    - certs
    - crl
    - newcerts
    - private
    - public
    - reqs

- name: OpenVPN | Certs | Ensure the files exist
  file:
    dest: "{{ demo_pkipath }}/{{ item }}"
    state: touch
    mode: '0640'
  with_items:
    - ".rnd"
    - "private/.rnd"
    - "index.txt"
    - "index.txt.attr"
    - "serial"

- name: OpenVPN | Certs | Generate the openssl server configs
  template:
    src: openssl.cnf.j2
    dest: "{{ demo_pkipath }}/openssl.cnf"
    mode: '0640'

- name: OpenVPN | Certs | Build the CA pair
  shell: >
    umask 077;
    openssl ecparam -name secp384r1 -out ecparams/secp384r1.pem &&
    openssl req -utf8 -new
    -newkey ec:ecparams/secp384r1.pem
    -config <(cat openssl.cnf <(printf "[basic_exts]\nsubjectAltName={{ subjectAltName }}"))
    -keyout ca.key
    -out {{ demo_pkipath }}/ca.pem -x509 -days 3650
    -batch
    -passout pass:"{{ CA_password }}" &&
    touch ca_generated
  args:
    chdir: "{{ demo_pkipath }}"
    creates: "ca_generated"
    executable: bash
  tags:
    - skip_ansible_lint

- name: OpenVPN | Certs | Generate the serial number
  shell: echo 01 > serial && touch serial_generated
  args:
    chdir: "{{ demo_pkipath }}"
    creates: serial_generated
  tags:
    - skip_ansible_lint

- name: OpenVPN | Certs | Build the server pair
  shell: >
    umask 077;
    openssl req -utf8 -new
    -newkey ec:ecparams/secp384r1.pem
    -config <(cat openssl.cnf <(printf "[basic_exts]\nsubjectAltName=IP:{{ public_ip }}"))
    -keyout {{ demo_pkipath }}/vpn.key
    -out reqs/server.req -nodes
    -passin pass:"{{ CA_password }}"
    -subj "/CN=server@ovpn" -batch &&
    openssl ca -utf8
    -in reqs/server.req
    -out {{ demo_pkipath }}/vpn.pem
    -config <(cat openssl.cnf <(printf "[basic_exts]\nsubjectAltName=IP:{{ public_ip }}"))
    -days 365 -batch
    -passin pass:"{{ CA_password }}"
    -subj "/CN=server@ovpn" &&
    touch certs/server_crt_generated
  args:
    chdir: "{{ demo_pkipath }}"
    creates: certs/server_crt_generated
    executable: bash
  tags:
    - skip_ansible_lint

- name: OpenVPN | Certs | Build the DH
  shell: >
    umask 077;
    openssl dhparam 2048 -out {{ demo_pkipath }}/dh.pem &&
    touch certs/dh_generated
  args:
    chdir: "{{ demo_pkipath }}"
    creates: certs/dh_generated
    executable: bash
  tags:
    - skip_ansible_lint

- name: OpenVPN | Certs | Genereate blank CRL file
  shell: >
    openssl ca -gencrl
    -config openssl.cnf
    -passin pass:"{{ CA_password }}"
    -out {{ demo_pkipath }}/crl.pem
  args:
    chdir: '{{ demo_pkipath }}'
    executable: bash
    creates: "{{ demo_pkipath }}/crl.pem"
  tags:
    - skip_ansible_lint
